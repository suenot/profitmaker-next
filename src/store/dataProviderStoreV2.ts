import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { subscribeWithSelector } from 'zustand/middleware';
import { enableMapSet } from 'immer';

// CCXT –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CDN script tag - –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ window.ccxt
declare global {
  interface Window {
    ccxt: any;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ CCXT –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (CDN –≤–µ—Ä—Å–∏—è)
const getCCXT = () => {
  if (!window.ccxt) {
    console.error('CCXT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CDN script tag');
    return null;
  }
  return window.ccxt;
};

import {
  DataProvider,
  DataType,
  CCXTBrowserProvider,
  Candle,
  Trade,
  OrderBook,
  ConnectionStatus,
  ProviderOperationResult,
  DataFetchMethod,
  DataFetchSettings,
  SubscriptionKey,
  ActiveSubscription,
  RestCycleManager
} from '../types/dataProviders';

interface DataProviderStateV2 {
  // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  providers: Record<string, DataProvider>;
  activeProviderId: string | null;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  dataFetchSettings: DataFetchSettings;
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
  activeSubscriptions: Record<string, ActiveSubscription>;
  
  // REST —Ü–∏–∫–ª—ã
  restCycles: Record<string, RestCycleManager>;
  
  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
  marketData: {
    candles: Record<string, Record<string, Candle[]>>; // [exchange][symbol] -> Candle[]
    trades: Record<string, Record<string, Trade[]>>;   // [exchange][symbol] -> Trade[]
    orderbook: Record<string, Record<string, OrderBook>>; // [exchange][symbol] -> OrderBook
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  loading: boolean;
  error: string | null;
}

interface DataProviderActionsV2 {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
  addProvider: (provider: DataProvider) => void;
  removeProvider: (providerId: string) => void;
  setActiveProvider: (providerId: string) => void;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  setDataFetchMethod: (method: DataFetchMethod) => Promise<void>;
  setRestInterval: (dataType: DataType, interval: number) => void;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
  subscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType) => Promise<ProviderOperationResult>;
  unsubscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType) => void;
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ store
  getCandles: (exchange: string, symbol: string) => Candle[];
  getTrades: (exchange: string, symbol: string) => Trade[];
  getOrderBook: (exchange: string, symbol: string) => OrderBook | null;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º store
  updateCandles: (exchange: string, symbol: string, candles: Candle[]) => void;
  updateTrades: (exchange: string, symbol: string, trades: Trade[]) => void;
  updateOrderBook: (exchange: string, symbol: string, orderbook: OrderBook) => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getSubscriptionKey: (exchange: string, symbol: string, dataType: DataType) => string;
  getActiveSubscriptionsList: () => ActiveSubscription[];
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
  startDataFetching: (subscriptionKey: string) => Promise<void>;
  stopDataFetching: (subscriptionKey: string) => void;
  startWebSocketFetching: (exchange: string, symbol: string, dataType: DataType, provider: DataProvider) => Promise<void>;
  startRestFetching: (exchange: string, symbol: string, dataType: DataType, provider: DataProvider) => Promise<void>;
  
  // –û—á–∏—Å—Ç–∫–∞
  cleanup: () => void;
}

type DataProviderStoreV2 = DataProviderStateV2 & DataProviderActionsV2;

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Map –∏ Set –≤ Immer
enableMapSet();

export const useDataProviderStoreV2 = create<DataProviderStoreV2>()(
  subscribeWithSelector(
    immer((set, get) => {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultProvider: CCXTBrowserProvider = {
        id: 'binance-default',
        type: 'ccxt-browser',
        name: 'Binance (Default)',
        status: 'connected',
        config: {
          exchangeId: 'binance',
          sandbox: false
        }
      };

      return {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        providers: {
          [defaultProvider.id]: defaultProvider
        },
        activeProviderId: defaultProvider.id,
        dataFetchSettings: {
          method: 'websocket',
          restIntervals: {
            trades: 1000,   // 1 —Å–µ–∫—É–Ω–¥–∞
            candles: 5000,  // 5 —Å–µ–∫—É–Ω–¥
            orderbook: 500  // 0.5 —Å–µ–∫—É–Ω–¥—ã
          }
        },
        activeSubscriptions: {},
        restCycles: {},
        marketData: {
          candles: {},
          trades: {},
          orderbook: {}
        },
        loading: false,
        error: null,

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
      addProvider: (provider: DataProvider) => {
        set(state => {
          state.providers[provider.id] = provider;
          if (!state.activeProviderId) {
            state.activeProviderId = provider.id;
          }
          console.log(`üîå Provider added: ${provider.id}`);
        });
      },

      removeProvider: (providerId: string) => {
        set(state => {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
          Object.keys(state.activeSubscriptions).forEach(key => {
            const subscription = state.activeSubscriptions[key];
            if (subscription.key.exchange === providerId) {
              get().stopDataFetching(key);
              delete state.activeSubscriptions[key];
            }
          });
          
          delete state.providers[providerId];
          
          if (state.activeProviderId === providerId) {
            const remainingProviders = Object.keys(state.providers);
            state.activeProviderId = remainingProviders.length > 0 ? remainingProviders[0] : null;
          }
          console.log(`üîå Provider removed: ${providerId}`);
        });
      },

      setActiveProvider: (providerId: string) => {
        set(state => {
          if (state.providers[providerId]) {
            state.activeProviderId = providerId;
            console.log(`üéØ Active provider set to: ${providerId}`);
          }
        });
      },

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      setDataFetchMethod: async (method: DataFetchMethod) => {
        const oldMethod = get().dataFetchSettings.method;
        
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        set(state => {
          state.dataFetchSettings.method = method;
        });
        
        console.log(`üîÑ Data fetch method changed from ${oldMethod} to ${method}`);
        
        // –ü—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Ç–æ–¥–∞ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if (oldMethod !== method) {
          const activeKeys = Object.keys(get().activeSubscriptions).filter(key => 
            get().activeSubscriptions[key].isActive
          );
          
          console.log(`üîÑ Restarting ${activeKeys.length} active subscriptions with new method: ${method}`);
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
          activeKeys.forEach(key => {
            console.log(`üõë Stopping subscription ${key} for method change`);
            get().stopDataFetching(key);
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
          set(state => {
            activeKeys.forEach(key => {
              if (state.activeSubscriptions[key]) {
                state.activeSubscriptions[key].method = method;
                console.log(`üîÑ Updated method for subscription ${key} to ${method}`);
              }
            });
          });
          
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
          await new Promise(resolve => setTimeout(resolve, 100));
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
          for (const key of activeKeys) {
            const subscription = get().activeSubscriptions[key];
            if (subscription) {
              console.log(`üöÄ Restarting subscription ${key} with method ${method}`);
              await get().startDataFetching(key);
            }
          }
          
          console.log(`‚úÖ All subscriptions restarted with method: ${method}`);
        }
      },

      setRestInterval: (dataType: DataType, interval: number) => {
        set(state => {
          const oldInterval = state.dataFetchSettings.restIntervals[dataType];
          state.dataFetchSettings.restIntervals[dataType] = interval;
          console.log(`‚è±Ô∏è REST interval for ${dataType} changed from ${oldInterval}ms to ${interval}ms`);
          
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º REST –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
          Object.keys(state.activeSubscriptions).forEach(key => {
            const subscription = state.activeSubscriptions[key];
            if (subscription.key.dataType === dataType && subscription.method === 'rest' && subscription.isActive) {
              get().stopDataFetching(key);
              get().startDataFetching(key);
            }
          });
        });
      },

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
      subscribe: async (subscriberId: string, exchange: string, symbol: string, dataType: DataType): Promise<ProviderOperationResult> => {
        const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType);
        const currentMethod = get().dataFetchSettings.method;
        
        try {
          let needsStart = false;
          let needsRestart = false;
          
          set(state => {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            if (state.activeSubscriptions[subscriptionKey]) {
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
              state.activeSubscriptions[subscriptionKey].subscriberCount++;
              console.log(`üìà Subscriber ${subscriberId} added to existing subscription: ${subscriptionKey} (count: ${state.activeSubscriptions[subscriptionKey].subscriberCount})`);
              
              // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
              if (state.activeSubscriptions[subscriptionKey].method !== currentMethod) {
                console.log(`üîÑ Subscription ${subscriptionKey} method outdated (${state.activeSubscriptions[subscriptionKey].method} -> ${currentMethod})`);
                state.activeSubscriptions[subscriptionKey].method = currentMethod;
                needsRestart = true;
              }
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —Ç–µ–∫—É—â–∏–º –º–µ—Ç–æ–¥–æ–º
              state.activeSubscriptions[subscriptionKey] = {
                key: { exchange, symbol, dataType },
                subscriberCount: 1,
                method: currentMethod,
                isFallback: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ fallback
                isActive: false,
                lastUpdate: 0
              };
              needsStart = true;
              console.log(`üÜï New subscription created: ${subscriptionKey} for subscriber ${subscriberId} (method: ${currentMethod})`);
            }
          });

          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
          if (needsRestart) {
            console.log(`üîÑ Restarting subscription ${subscriptionKey} due to method change`);
            get().stopDataFetching(subscriptionKey);
            await new Promise(resolve => setTimeout(resolve, 100));
            await get().startDataFetching(subscriptionKey);
          }
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤–∞—è
          else if (needsStart) {
            await get().startDataFetching(subscriptionKey);
          }

          return { success: true };
        } catch (error) {
          console.error(`‚ùå Failed to create subscription ${subscriptionKey}:`, error);
          return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
        }
      },

      unsubscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType) => {
        const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType);
        
        set(state => {
          if (state.activeSubscriptions[subscriptionKey]) {
            state.activeSubscriptions[subscriptionKey].subscriberCount--;
            console.log(`üìâ Subscriber ${subscriberId} removed from subscription: ${subscriptionKey} (count: ${state.activeSubscriptions[subscriptionKey].subscriberCount})`);
            
            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (state.activeSubscriptions[subscriptionKey].subscriberCount <= 0) {
              get().stopDataFetching(subscriptionKey);
              delete state.activeSubscriptions[subscriptionKey];
              console.log(`üóëÔ∏è Subscription removed: ${subscriptionKey}`);
            }
          }
        });
      },

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ store
      getCandles: (exchange: string, symbol: string): Candle[] => {
        const state = get();
        return state.marketData.candles[exchange]?.[symbol] || [];
      },

      getTrades: (exchange: string, symbol: string): Trade[] => {
        const state = get();
        return state.marketData.trades[exchange]?.[symbol] || [];
      },

      getOrderBook: (exchange: string, symbol: string): OrderBook | null => {
        const state = get();
        return state.marketData.orderbook[exchange]?.[symbol] || null;
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º store
      updateCandles: (exchange: string, symbol: string, candles: Candle[]) => {
        set(state => {
          if (!state.marketData.candles[exchange]) {
            state.marketData.candles[exchange] = {};
          }
          state.marketData.candles[exchange][symbol] = candles;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const subscriptionKey = get().getSubscriptionKey(exchange, symbol, 'candles');
          if (state.activeSubscriptions[subscriptionKey]) {
            state.activeSubscriptions[subscriptionKey].lastUpdate = Date.now();
          }
        });
      },

      updateTrades: (exchange: string, symbol: string, trades: Trade[]) => {
        set(state => {
          if (!state.marketData.trades[exchange]) {
            state.marketData.trades[exchange] = {};
          }
          
          // –î–ª—è trades –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–º–∞–∫—Å–∏–º—É–º 1000)
          const existing = state.marketData.trades[exchange][symbol] || [];
          const combined = [...existing, ...trades];
          state.marketData.trades[exchange][symbol] = combined.slice(-1000); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000
          
          // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const subscriptionKey = get().getSubscriptionKey(exchange, symbol, 'trades');
          if (state.activeSubscriptions[subscriptionKey]) {
            state.activeSubscriptions[subscriptionKey].lastUpdate = Date.now();
          }
        });
      },

      updateOrderBook: (exchange: string, symbol: string, orderbook: OrderBook) => {
        set(state => {
          if (!state.marketData.orderbook[exchange]) {
            state.marketData.orderbook[exchange] = {};
          }
          state.marketData.orderbook[exchange][symbol] = orderbook;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const subscriptionKey = get().getSubscriptionKey(exchange, symbol, 'orderbook');
          if (state.activeSubscriptions[subscriptionKey]) {
            state.activeSubscriptions[subscriptionKey].lastUpdate = Date.now();
          }
        });
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      getSubscriptionKey: (exchange: string, symbol: string, dataType: DataType): string => {
        return `${exchange}:${symbol}:${dataType}`;
      },

      getActiveSubscriptionsList: (): ActiveSubscription[] => {
        return Object.values(get().activeSubscriptions);
      },

      // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
      startDataFetching: async (subscriptionKey: string): Promise<void> => {
        const subscription = get().activeSubscriptions[subscriptionKey];
        if (!subscription || subscription.isActive) {
          return;
        }

        const { exchange, symbol, dataType } = subscription.key;
        const provider = get().providers[get().activeProviderId || ''];
        
        if (!provider) {
          console.error(`‚ùå No active provider for subscription ${subscriptionKey}`);
          return;
        }

        console.log(`üöÄ Starting data fetching for ${subscriptionKey} using ${subscription.method} method`);

        set(state => {
          state.activeSubscriptions[subscriptionKey].isActive = true;
        });

        try {
          if (subscription.method === 'websocket') {
            await get().startWebSocketFetching(exchange, symbol, dataType, provider);
          } else {
            await get().startRestFetching(exchange, symbol, dataType, provider);
          }
        } catch (error) {
          console.error(`‚ùå Failed to start data fetching for ${subscriptionKey}:`, error);
          set(state => {
            state.activeSubscriptions[subscriptionKey].isActive = false;
          });
        }
      },

      stopDataFetching: (subscriptionKey: string) => {
        const subscription = get().activeSubscriptions[subscriptionKey];
        if (!subscription || !subscription.isActive) {
          return;
        }

        console.log(`üõë Stopping data fetching for ${subscriptionKey}`);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (subscription.wsConnection) {
          subscription.wsConnection.close();
          console.log(`üîå WebSocket connection closed for ${subscriptionKey}`);
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º REST —Ü–∏–∫–ª
        if (subscription.intervalId) {
          clearInterval(subscription.intervalId);
          console.log(`‚è∞ REST interval cleared for ${subscriptionKey}`);
        }

        set(state => {
          state.activeSubscriptions[subscriptionKey].isActive = false;
          delete state.activeSubscriptions[subscriptionKey].intervalId;
          delete state.activeSubscriptions[subscriptionKey].wsConnection;
        });
      },

      // –ó–∞–ø—É—Å–∫ WebSocket –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      startWebSocketFetching: async (exchange: string, symbol: string, dataType: DataType, provider: DataProvider) => {
        if (provider.type !== 'ccxt-browser') {
          console.warn(`‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–∏–ø–∞ ${provider.type}`);
          return;
        }

        const ccxtProvider = provider as CCXTBrowserProvider;
        const ccxt = getCCXT();
        if (!ccxt) return;

        try {
          const ExchangeClass = ccxt[exchange];
          if (!ExchangeClass) {
            throw new Error(`Exchange ${exchange} not found in CCXT`);
          }

          const exchangeInstance = new ExchangeClass(ccxtProvider.config);
          const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebSocket –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
          let watchMethod: string;
          let hasSupport: boolean;

          switch (dataType) {
            case 'candles':
              watchMethod = 'watchOHLCV';
              hasSupport = exchangeInstance.has?.[watchMethod] || false;
              break;
            case 'trades':
              watchMethod = 'watchTrades';
              hasSupport = exchangeInstance.has?.[watchMethod] || false;
              break;
            case 'orderbook':
              watchMethod = 'watchOrderBook';
              hasSupport = exchangeInstance.has?.[watchMethod] || false;
              break;
            default:
              throw new Error(`Unsupported data type: ${dataType}`);
          }

          if (!hasSupport) {
            console.warn(`‚ö†Ô∏è Exchange ${exchange} does not support ${watchMethod}, falling back to REST`);
            console.log(`üîç Debug info: exchangeInstance.has =`, exchangeInstance.has);
            console.log(`üîç Debug info: exchangeInstance.has?.${watchMethod} =`, exchangeInstance.has?.[watchMethod]);
            console.log(`üîç Debug info: Available methods:`, Object.keys(exchangeInstance.has || {}));
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ REST —Å —Ñ–ª–∞–≥–æ–º fallback
            set(state => {
              if (state.activeSubscriptions[subscriptionKey]) {
                state.activeSubscriptions[subscriptionKey].method = 'rest';
                state.activeSubscriptions[subscriptionKey].isFallback = true; // –í–ê–ñ–ù–û: –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ fallback
              }
            });
            await get().startRestFetching(exchange, symbol, dataType, provider);
            return;
          }

          console.log(`üì° Starting WebSocket stream: ${exchange} ${symbol} ${dataType}`);

          // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Ç–æ–∫
          const startWebSocketStream = async () => {
            try {
              switch (dataType) {
                case 'candles':
                  const candles = await exchangeInstance.watchOHLCV(symbol, '1m');
                  get().updateCandles(exchange, symbol, candles);
                  break;
                case 'trades':
                  const trades = await exchangeInstance.watchTrades(symbol);
                  get().updateTrades(exchange, symbol, trades);
                  break;
                case 'orderbook':
                  const orderbook = await exchangeInstance.watchOrderBook(symbol);
                  get().updateOrderBook(exchange, symbol, orderbook);
                  break;
              }
            } catch (error) {
              console.error(`‚ùå WebSocket stream error for ${subscriptionKey}:`, error);
              // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö - –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
              setTimeout(() => {
                const subscription = get().activeSubscriptions[subscriptionKey];
                if (subscription?.isActive) {
                  startWebSocketStream();
                }
              }, 5000);
            }
          };

          startWebSocketStream();

        } catch (error) {
          console.error(`‚ùå Failed to start WebSocket for ${exchange} ${symbol} ${dataType}:`, error);
          throw error;
        }
      },

      // –ó–∞–ø—É—Å–∫ REST –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      startRestFetching: async (exchange: string, symbol: string, dataType: DataType, provider: DataProvider) => {
        if (provider.type !== 'ccxt-browser') {
          console.warn(`‚ö†Ô∏è REST –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–∏–ø–∞ ${provider.type}`);
          return;
        }

        const ccxtProvider = provider as CCXTBrowserProvider;
        const ccxt = getCCXT();
        if (!ccxt) return;

        try {
          const ExchangeClass = ccxt[exchange];
          if (!ExchangeClass) {
            throw new Error(`Exchange ${exchange} not found in CCXT`);
          }

          const exchangeInstance = new ExchangeClass(ccxtProvider.config);
          const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType);
          const interval = get().dataFetchSettings.restIntervals[dataType];

          console.log(`üîÑ Starting REST polling: ${exchange} ${symbol} ${dataType} every ${interval}ms`);

          const fetchData = async () => {
            try {
              const subscription = get().activeSubscriptions[subscriptionKey];
              if (!subscription?.isActive) return;

              switch (dataType) {
                case 'candles':
                  const candles = await exchangeInstance.fetchOHLCV(symbol, '1m', undefined, 100);
                  if (candles && candles.length > 0) {
                    const formattedCandles = candles.map((c: any[]) => ({
                      timestamp: c[0],
                      open: c[1],
                      high: c[2],
                      low: c[3],
                      close: c[4],
                      volume: c[5]
                    }));
                    get().updateCandles(exchange, symbol, formattedCandles);
                  }
                  break;
                case 'trades':
                  const trades = await exchangeInstance.fetchTrades(symbol, undefined, 100);
                  if (trades && trades.length > 0) {
                    get().updateTrades(exchange, symbol, trades);
                  }
                  break;
                case 'orderbook':
                  const orderbook = await exchangeInstance.fetchOrderBook(symbol);
                  if (orderbook) {
                    get().updateOrderBook(exchange, symbol, orderbook);
                  }
                  break;
              }
            } catch (error) {
              console.error(`‚ùå REST fetch error for ${subscriptionKey}:`, error);
              // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            }
          };

          // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
          await fetchData();

                     // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
           const intervalId = setInterval(fetchData, interval) as any;

           set(state => {
             if (state.activeSubscriptions[subscriptionKey]) {
               state.activeSubscriptions[subscriptionKey].intervalId = intervalId;
             }
           });

        } catch (error) {
          console.error(`‚ùå Failed to start REST polling for ${exchange} ${symbol} ${dataType}:`, error);
          throw error;
        }
      },

      // –û—á–∏—Å—Ç–∫–∞
      cleanup: () => {
        const subscriptions = get().activeSubscriptions;
        Object.keys(subscriptions).forEach(key => {
          get().stopDataFetching(key);
        });

        set(state => {
          state.activeSubscriptions = {};
          state.restCycles = {};
          state.marketData = {
            candles: {},
            trades: {},
            orderbook: {}
          };
        });

        console.log(`üßπ Data provider store cleaned up`);
      }
      };
    })
  )
); 