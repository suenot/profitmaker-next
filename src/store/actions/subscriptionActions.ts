import type { StateCreator } from 'zustand';
import type { DataProviderStore } from '../types';
import type { DataType, ProviderOperationResult, Timeframe, MarketType } from '../../types/dataProviders';

export interface SubscriptionActions {
  subscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType, timeframe?: Timeframe, market?: MarketType) => Promise<ProviderOperationResult>;
  unsubscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType, timeframe?: Timeframe, market?: MarketType) => void;
}

export const createSubscriptionActions: StateCreator<
  DataProviderStore,
  [['zustand/immer', never]],
  [],
  SubscriptionActions
> = (set, get) => ({
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
  subscribe: async (subscriberId: string, exchange: string, symbol: string, dataType: DataType, timeframe?: Timeframe, market: MarketType = 'spot'): Promise<ProviderOperationResult> => {
    const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType, timeframe, market);
    const currentMethod = get().dataFetchSettings.method;
    
    try {
      let needsStart = false;
      let needsRestart = false;
      
      set(state => {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if (state.activeSubscriptions[subscriptionKey]) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          state.activeSubscriptions[subscriptionKey].subscriberCount++;
          console.log(`üìà Subscriber ${subscriberId} added to existing subscription: ${subscriptionKey} (count: ${state.activeSubscriptions[subscriptionKey].subscriberCount})`);
          
          // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
          if (state.activeSubscriptions[subscriptionKey].method !== currentMethod) {
            console.log(`üîÑ Subscription ${subscriptionKey} method outdated (${state.activeSubscriptions[subscriptionKey].method} -> ${currentMethod})`);
            state.activeSubscriptions[subscriptionKey].method = currentMethod;
            needsRestart = true;
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —Ç–µ–∫—É—â–∏–º –º–µ—Ç–æ–¥–æ–º
          state.activeSubscriptions[subscriptionKey] = {
            key: { exchange, symbol, dataType, timeframe, market },
            subscriberCount: 1,
            method: currentMethod,
            isFallback: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ fallback
            isActive: false,
            lastUpdate: 0
          };
          needsStart = true;
          console.log(`üÜï New subscription created: ${subscriptionKey} for subscriber ${subscriberId} (method: ${currentMethod})`);
        }
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (needsRestart) {
        console.log(`üîÑ Restarting subscription ${subscriptionKey} due to method change`);
        get().stopDataFetching(subscriptionKey);
        await new Promise(resolve => setTimeout(resolve, 100));
        await get().startDataFetching(subscriptionKey);
      }
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤–∞—è
      else if (needsStart) {
        await get().startDataFetching(subscriptionKey);
      }

      return { success: true };
    } catch (error) {
      console.error(`‚ùå Failed to create subscription ${subscriptionKey}:`, error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  },

  unsubscribe: (subscriberId: string, exchange: string, symbol: string, dataType: DataType, timeframe?: Timeframe, market: MarketType = 'spot') => {
    const subscriptionKey = get().getSubscriptionKey(exchange, symbol, dataType, timeframe, market);
    
    set(state => {
      if (state.activeSubscriptions[subscriptionKey]) {
        state.activeSubscriptions[subscriptionKey].subscriberCount--;
        console.log(`üìâ Subscriber ${subscriberId} removed from subscription: ${subscriptionKey} (count: ${state.activeSubscriptions[subscriptionKey].subscriberCount})`);
        
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (state.activeSubscriptions[subscriptionKey].subscriberCount <= 0) {
          get().stopDataFetching(subscriptionKey);
          delete state.activeSubscriptions[subscriptionKey];
          console.log(`üóëÔ∏è Subscription removed: ${subscriptionKey}`);
        }
      }
    });
  }
}); 