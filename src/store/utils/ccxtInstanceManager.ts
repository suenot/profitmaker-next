import { getCCXT } from './ccxtUtils';
import type { CCXTBrowserProvider } from '../../types/dataProviders';

interface CachedExchangeInstance {
  instance: any;
  provider: CCXTBrowserProvider;
  lastAccess: number;
  marketsLoaded: boolean;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è CCXT exchange instances
 * –ò–∑–±–µ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ instance –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
 */
class CCXTInstanceManager {
  private cache = new Map<string, CachedExchangeInstance>();
  private readonly CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
   */
  private createCacheKey(exchange: string, provider: CCXTBrowserProvider): string {
    return `${exchange}:${provider.id}:${provider.config.sandbox ? 'sandbox' : 'live'}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ instance
   */
  private isValid(cached: CachedExchangeInstance): boolean {
    const now = Date.now();
    return (now - cached.lastAccess) < this.CACHE_TTL;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç exchange instance
   */
  async getExchangeInstance(exchange: string, provider: CCXTBrowserProvider): Promise<any> {
    const cacheKey = this.createCacheKey(exchange, provider);
    const cached = this.cache.get(cacheKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cached && this.isValid(cached)) {
      cached.lastAccess = Date.now();
      console.log(`üìã [CCXTInstanceManager] Using cached instance for ${exchange}`);
      return cached.instance;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π instance
    console.log(`üîÑ [CCXTInstanceManager] Creating new instance for ${exchange}`);
    
    const ccxt = getCCXT();
    if (!ccxt) {
      throw new Error('CCXT not available');
    }

    const ExchangeClass = ccxt[exchange];
    if (!ExchangeClass) {
      throw new Error(`Exchange ${exchange} not found in CCXT`);
    }

    const exchangeInstance = new ExchangeClass({
      sandbox: provider.config.sandbox || false,
      ...provider.config.options,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å userStore –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º markets —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    await exchangeInstance.loadMarkets();

    const cachedInstance: CachedExchangeInstance = {
      instance: exchangeInstance,
      provider: { ...provider }, // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      lastAccess: Date.now(),
      marketsLoaded: true
    };

    this.cache.set(cacheKey, cachedInstance);
    console.log(`‚úÖ [CCXTInstanceManager] Cached new instance for ${exchange}, cache size: ${this.cache.size}`);

    return exchangeInstance;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
   */
  invalidate(exchange: string, providerId?: string): void {
    if (providerId) {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      const keysToDelete = Array.from(this.cache.keys()).filter(key => 
        key.startsWith(`${exchange}:${providerId}:`)
      );
      keysToDelete.forEach(key => this.cache.delete(key));
      console.log(`üóëÔ∏è [CCXTInstanceManager] Invalidated cache for ${exchange}:${providerId}`);
    } else {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –±–∏—Ä–∂–∏
      const keysToDelete = Array.from(this.cache.keys()).filter(key => 
        key.startsWith(`${exchange}:`)
      );
      keysToDelete.forEach(key => this.cache.delete(key));
      console.log(`üóëÔ∏è [CCXTInstanceManager] Invalidated cache for all ${exchange} providers`);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  clearCache(): void {
    this.cache.clear();
    console.log(`üßπ [CCXTInstanceManager] Cleared entire cache`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
   */
  cleanup(): void {
    const now = Date.now();
    const keysToDelete: string[] = [];

    this.cache.forEach((cached, key) => {
      if (!this.isValid(cached)) {
        keysToDelete.push(key);
      }
    });

    keysToDelete.forEach(key => this.cache.delete(key));
    
    if (keysToDelete.length > 0) {
      console.log(`üßΩ [CCXTInstanceManager] Cleaned up ${keysToDelete.length} expired instances`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    return {
      totalInstances: this.cache.size,
      instances: Array.from(this.cache.entries()).map(([key, cached]) => ({
        key,
        exchange: key.split(':')[0],
        providerId: key.split(':')[1],
        sandbox: key.split(':')[2] === 'sandbox',
        lastAccess: cached.lastAccess,
        age: Date.now() - cached.lastAccess,
        marketsLoaded: cached.marketsLoaded
      }))
    };
  }
}

// Singleton instance
export const ccxtInstanceManager = new CCXTInstanceManager();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  ccxtInstanceManager.cleanup();
}, 10 * 60 * 1000); 