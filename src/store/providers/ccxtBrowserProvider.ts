import { getCCXT } from '../utils/ccxtUtils';
import { ccxtInstanceManager } from '../utils/ccxtInstanceManager';
import type { CCXTBrowserProvider } from '../../types/dataProviders';

/**
 * CCXT Browser Provider Implementation
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ CCXT –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export class CCXTBrowserProviderImpl {
  private provider: CCXTBrowserProvider;

  constructor(provider: CCXTBrowserProvider) {
    this.provider = provider;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–∏—Ä–∂–∏
   */
  async getSymbolsForExchange(exchange: string): Promise<string[]> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π instance
      const exchangeInstance = await ccxtInstanceManager.getExchangeInstance(exchange, this.provider);

      if (!exchangeInstance.markets) {
        console.warn(`Markets not loaded for ${exchange}`);
        return [];
      }

      // Get all symbols from markets
      const symbols = Object.keys(exchangeInstance.markets);
      
      // Filter to get only active symbols and sort by popularity
      const activeSymbols = symbols
        .filter(symbol => {
          const market = exchangeInstance.markets[symbol];
          return market && market.active !== false;
        })
        .sort((a, b) => {
          // Sort by popularity (BTC and ETH first)
          if (a.includes('BTC')) return -1;
          if (b.includes('BTC')) return 1;
          if (a.includes('ETH')) return -1;
          if (b.includes('ETH')) return 1;
          return a.localeCompare(b);
        })
        .slice(0, 50); // Limit to 50 most popular

      console.log(`üìä [CCXTBrowser] Retrieved ${activeSymbols.length} symbols for ${exchange} (from cache)`);
      return activeSymbols;
    } catch (error) {
      console.error(`‚ùå [CCXTBrowser] Error getting symbols for exchange: ${exchange}`, error);
      return [];
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è –±–∏—Ä–∂–∏
   * 100% CCXT-BASED: –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CCXT API
   */
  async getMarketsForExchange(exchange: string): Promise<string[]> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π instance
      const exchangeInstance = await ccxtInstanceManager.getExchangeInstance(exchange, this.provider);

      if (!exchangeInstance.markets) {
        console.warn(`‚ùå [CCXTBrowser] No markets data available for ${exchange}`);
        return [];
      }

      console.log(`üîç [CCXTBrowser] Analyzing ${exchange} CCXT markets data:`, {
        totalMarkets: Object.keys(exchangeInstance.markets).length,
        sampleMarkets: Object.keys(exchangeInstance.markets).slice(0, 5),
        exchangeInfo: exchangeInstance.describe ? exchangeInstance.describe() : 'No describe()'
      });

      const marketTypes = new Set<string>();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï —Ä—ã–Ω–∫–∏ –∏–∑ CCXT
      for (const [symbol, market] of Object.entries(exchangeInstance.markets)) {
        if (market && typeof market === 'object') {
          const marketObj = market as any;
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
          if (marketTypes.size < 3) {
            console.log(`üìä [CCXTBrowser] Sample market structure for ${symbol}:`, {
              type: marketObj.type,
              subType: marketObj.subType,
              spot: marketObj.spot,
              future: marketObj.future,
              option: marketObj.option,
              swap: marketObj.swap,
              linear: marketObj.linear,
              inverse: marketObj.inverse,
              settle: marketObj.settle,
              settleId: marketObj.settleId,
              contractSize: marketObj.contractSize,
              expiry: marketObj.expiry
            });
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ä—ã–Ω–∫–æ–≤ –∏–∑ CCXT –¥–∞–Ω–Ω—ã—Ö
          if (marketObj.type) {
            marketTypes.add(marketObj.type.toLowerCase());
          }
          
          if (marketObj.subType) {
            marketTypes.add(marketObj.subType.toLowerCase());
          }
          
          // Boolean —Ñ–ª–∞–≥–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ä—ã–Ω–∫–æ–≤
          if (marketObj.spot === true) {
            marketTypes.add('spot');
          }
          if (marketObj.future === true) {
            marketTypes.add('future');
          }
          if (marketObj.option === true) {
            marketTypes.add('option');
          }
          if (marketObj.swap === true) {
            marketTypes.add('swap');
          }
          if (marketObj.linear === true) {
            marketTypes.add('linear');
          }
          if (marketObj.linear === false) {
            marketTypes.add('inverse');
          }
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
          if (marketObj.settle && marketObj.settle !== marketObj.base) {
            marketTypes.add('futures'); // –ï—Å–ª–∏ –µ—Å—Ç—å settlement currency –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç base
          }
          if (marketObj.expiry) {
            marketTypes.add('expiry'); // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º
          }
          if (marketObj.contractSize && marketObj.contractSize !== 1) {
            marketTypes.add('contract'); // –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
          }
        }
      }
      
      console.log(`üéØ [CCXTBrowser] Raw market types detected from CCXT:`, Array.from(marketTypes));
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CCXT —Ç–∏–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      const finalMarkets: string[] = [];
      
      marketTypes.forEach(type => {
        switch (type) {
          case 'spot':
            if (!finalMarkets.includes('spot')) finalMarkets.push('spot');
            break;
          case 'future':
          case 'futures':
          case 'linear':
          case 'contract':
            if (!finalMarkets.includes('futures')) finalMarkets.push('futures');
            break;
          case 'option':
          case 'options':
          case 'expiry':
            if (!finalMarkets.includes('options')) finalMarkets.push('options');
            break;
          case 'swap':
            if (!finalMarkets.includes('swap')) finalMarkets.push('swap');
            break;
          case 'inverse':
            if (!finalMarkets.includes('inverse')) finalMarkets.push('inverse');
            break;
          case 'margin':
            if (!finalMarkets.includes('margin')) finalMarkets.push('margin');
            break;
        }
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CCXT has API (–Ω–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º)
      const hasCapabilities = {
        futures: !!(exchangeInstance.has?.fetchFuturesBalance || 
                   exchangeInstance.has?.fetchDerivativesMarkets ||
                   exchangeInstance.has?.fetchPositions),
        margin: !!(exchangeInstance.has?.fetchMarginBalance || 
                  exchangeInstance.has?.fetchBorrowRate),
        options: !!(exchangeInstance.has?.fetchOption ||
                   exchangeInstance.has?.fetchOptions)
      };

      console.log(`üîß [CCXTBrowser] CCXT API capabilities:`, hasCapabilities);
      
      console.log(`‚úÖ [CCXTBrowser] Final markets for ${exchange}:`, {
        total: finalMarkets.length,
        markets: finalMarkets,
        source: '100% CCXT Data',
        hasCapabilities
      });
      
      return finalMarkets.length > 0 ? finalMarkets : [];
    } catch (error) {
      console.error(`‚ùå [CCXTBrowser] Error getting markets for exchange: ${exchange}`, error);
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –ù–ï –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –±–∏—Ä–∂–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   */
  invalidateCache(exchange: string): void {
    ccxtInstanceManager.invalidate(exchange, this.provider.id);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getCacheStats() {
    return ccxtInstanceManager.getStats();
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXT Browser –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
export const createCCXTBrowserProvider = (provider: CCXTBrowserProvider): CCXTBrowserProviderImpl => {
  return new CCXTBrowserProviderImpl(provider);
}; 