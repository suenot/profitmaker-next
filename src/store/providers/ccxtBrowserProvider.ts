import { getCCXT } from '../utils/ccxtUtils';
import { ccxtInstanceManager } from '../utils/ccxtInstanceManager';
import type { CCXTBrowserProvider } from '../../types/dataProviders';

/**
 * CCXT Browser Provider Implementation
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ CCXT –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export class CCXTBrowserProviderImpl {
  private provider: CCXTBrowserProvider;

  constructor(provider: CCXTBrowserProvider) {
    this.provider = provider;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–∏—Ä–∂–∏
   */
  async getSymbolsForExchange(exchange: string): Promise<string[]> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π instance
      const exchangeInstance = await ccxtInstanceManager.getExchangeInstance(exchange, this.provider);

      if (!exchangeInstance.markets) {
        console.warn(`Markets not loaded for ${exchange}`);
        return [];
      }

      // Get all symbols from markets
      const symbols = Object.keys(exchangeInstance.markets);
      
      // Filter to get only active symbols and sort by popularity
      const activeSymbols = symbols
        .filter(symbol => {
          const market = exchangeInstance.markets[symbol];
          return market && market.active !== false;
        })
        .sort((a, b) => {
          // Sort by popularity (BTC and ETH first)
          if (a.includes('BTC')) return -1;
          if (b.includes('BTC')) return 1;
          if (a.includes('ETH')) return -1;
          if (b.includes('ETH')) return 1;
          return a.localeCompare(b);
        })
        .slice(0, 50); // Limit to 50 most popular

      console.log(`üìä [CCXTBrowser] Retrieved ${activeSymbols.length} symbols for ${exchange} (from cache)`);
      return activeSymbols;
    } catch (error) {
      console.error(`‚ùå [CCXTBrowser] Error getting symbols for exchange: ${exchange}`, error);
      return [];
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è –±–∏—Ä–∂–∏
   * –û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∏—Ä–∂–∏ –≤ CCXT (exchange.has)
   * –ë–ï–ó –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –±–∏—Ä–∂–∏
   */
  async getMarketsForExchange(exchange: string): Promise<string[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º CCXT –∫–ª–∞—Å—Å –±–∏—Ä–∂–∏ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Å API –∫–ª—é—á–∞–º–∏
      const { getCCXT } = await import('../utils/ccxtUtils');
      const ccxt = getCCXT();
      if (!ccxt) {
        throw new Error('CCXT not available');
      }

      const ExchangeClass = ccxt[exchange];
      if (!ExchangeClass) {
        throw new Error(`Exchange ${exchange} not found in CCXT`);
      }

      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const exchangeInstance = new ExchangeClass();
      const hasCapabilities = exchangeInstance.has || {};

      console.log(`üîç [CCXTBrowser] Analyzing ${exchange} static capabilities:`, {
        exchange: exchange,
        hasCapabilities: hasCapabilities
      });

      const availableMarkets: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä—ã–Ω–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∏—Ä–∂–∏
      if (hasCapabilities.spot === true) {
        availableMarkets.push('spot');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports spot trading`);
      }

      if (hasCapabilities.margin === true) {
        availableMarkets.push('margin');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports margin trading`);
      }

      if (hasCapabilities.swap === true) {
        availableMarkets.push('swap');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports swap trading`);
      }

      if (hasCapabilities.future === true) {
        availableMarkets.push('futures');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports futures trading`);
      }

      if (hasCapabilities.option === true) {
        availableMarkets.push('options');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports options trading`);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è futures —á–µ—Ä–µ–∑ API capabilities
      if (!availableMarkets.includes('futures') && (
        hasCapabilities.fetchFuturesBalance ||
        hasCapabilities.fetchDerivativesMarkets ||
        hasCapabilities.fetchPositions ||
        hasCapabilities.fetchPosition
      )) {
        availableMarkets.push('futures');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports futures (detected via API methods)`);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è margin —á–µ—Ä–µ–∑ API capabilities
      if (!availableMarkets.includes('margin') && (
        hasCapabilities.fetchMarginBalance ||
        hasCapabilities.fetchBorrowRate ||
        hasCapabilities.fetchBorrowRates
      )) {
        availableMarkets.push('margin');
        console.log(`‚úÖ [CCXTBrowser] ${exchange} supports margin (detected via API methods)`);
      }

      console.log(`‚úÖ [CCXTBrowser] Final markets for ${exchange}:`, {
        total: availableMarkets.length,
        markets: availableMarkets,
        source: 'Static Exchange Configuration (has)',
        exchangeConfig: {
          spot: hasCapabilities.spot,
          margin: hasCapabilities.margin,
          swap: hasCapabilities.swap,
          future: hasCapabilities.future,
          option: hasCapabilities.option
        }
      });
      
      return availableMarkets;
    } catch (error) {
      console.error(`‚ùå [CCXTBrowser] Error getting markets for exchange: ${exchange}`, error);
      return []; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –±–∏—Ä–∂–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   */
  invalidateCache(exchange: string): void {
    ccxtInstanceManager.invalidate(exchange, this.provider.id);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getCacheStats() {
    return ccxtInstanceManager.getStats();
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CCXT Browser –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
export const createCCXTBrowserProvider = (provider: CCXTBrowserProvider): CCXTBrowserProviderImpl => {
  return new CCXTBrowserProviderImpl(provider);
}; 