import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { ErrorBoundary } from '../ui/ErrorBoundary';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Separator } from '../ui/separator';
import { useDataProviderStoreV2 } from '../../store/dataProviderStoreV2';
import { Badge } from '../ui/badge';
import { Activity, Users, Wifi, Database, Play, Square, Eye } from 'lucide-react';

interface DemoSubscriber {
  id: string;
  name: string;
  isActive: boolean;
  color: string;
}

const DataProviderDemoWidgetInner: React.FC = () => {
  const { 
    subscribe, 
    unsubscribe, 
    getTrades,
    getActiveSubscriptionsList,
    dataFetchSettings
  } = useDataProviderStoreV2();

  const [exchange, setExchange] = useState('binance');
  const [symbol, setSymbol] = useState('BTC/USDT');
  const [subscribers, setSubscribers] = useState<DemoSubscriber[]>([
    { id: 'demo-1', name: '–ü–æ–¥–ø–∏—Å—á–∏–∫ A', isActive: false, color: 'bg-blue-100 text-blue-800' },
    { id: 'demo-2', name: '–ü–æ–¥–ø–∏—Å—á–∏–∫ B', isActive: false, color: 'bg-green-100 text-green-800' },
    { id: 'demo-3', name: '–ü–æ–¥–ø–∏—Å—á–∏–∫ C', isActive: false, color: 'bg-purple-100 text-purple-800' },
    { id: 'demo-4', name: '–ü–æ–¥–ø–∏—Å—á–∏–∫ D', isActive: false, color: 'bg-orange-100 text-orange-800' },
  ]);

  const activeSubscriptions = getActiveSubscriptionsList();
  const currentTrades = getTrades(exchange, symbol);
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const currentSubscription = activeSubscriptions.find(
    sub => sub.key.exchange === exchange && 
           sub.key.symbol === symbol && 
           sub.key.dataType === 'trades'
  );

  const toggleSubscriber = async (subscriberId: string) => {
    const subscriber = subscribers.find(s => s.id === subscriberId);
    if (!subscriber) return;

    if (subscriber.isActive) {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
      unsubscribe(subscriberId, exchange, symbol, 'trades');
    } else {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
      await subscribe(subscriberId, exchange, symbol, 'trades');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setSubscribers(prev => 
      prev.map(s => 
        s.id === subscriberId ? { ...s, isActive: !s.isActive } : s
      )
    );
  };

  const toggleAllSubscribers = async () => {
    const allActive = subscribers.every(s => s.isActive);
    
    if (allActive) {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö
      for (const subscriber of subscribers) {
        if (subscriber.isActive) {
          unsubscribe(subscriber.id, exchange, symbol, 'trades');
        }
      }
      setSubscribers(prev => prev.map(s => ({ ...s, isActive: false })));
    } else {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö
      for (const subscriber of subscribers) {
        if (!subscriber.isActive) {
          await subscribe(subscriber.id, exchange, symbol, 'trades');
        }
      }
      setSubscribers(prev => prev.map(s => ({ ...s, isActive: true })));
    }
  };

  const activeSubscriberCount = subscribers.filter(s => s.isActive).length;
  const allActive = subscribers.every(s => s.isActive);
  const anyActive = subscribers.some(s => s.isActive);

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Eye className="h-5 w-5" />
          –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö</Label>
          <div className="grid grid-cols-2 gap-2">
            <div>
              <Label className="text-xs">–ë–∏—Ä–∂–∞</Label>
              <Input
                value={exchange}
                onChange={(e) => setExchange(e.target.value)}
                placeholder="binance"
                disabled={anyActive}
              />
            </div>
            <div>
              <Label className="text-xs">–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞</Label>
              <Input
                value={symbol}
                onChange={(e) => setSymbol(e.target.value)}
                placeholder="BTC/USDT"
                disabled={anyActive}
              />
            </div>
          </div>
          
          <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
            üì° –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è: <strong>{dataFetchSettings.method === 'websocket' ? 'WebSocket' : 'REST'}</strong>
            {dataFetchSettings.method === 'rest' && (
              <span> (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {dataFetchSettings.restIntervals.trades}ms)</span>
            )}
          </div>
        </div>

        <Separator />

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <Label className="text-sm font-medium">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</Label>
            <Button
              onClick={toggleAllSubscribers}
              size="sm"
              variant={allActive ? "destructive" : "default"}
            >
                             {allActive ? (
                 <>
                   <Square className="h-4 w-4 mr-1" />
                   –û—Ç–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö
                 </>
               ) : (
                <>
                  <Play className="h-4 w-4 mr-1" />
                  –ü–æ–¥–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö
                </>
              )}
            </Button>
          </div>

          <div className="grid grid-cols-2 gap-2">
            {subscribers.map((subscriber) => (
              <div
                key={subscriber.id}
                className={`p-3 rounded-lg border-2 transition-all ${
                  subscriber.isActive ? 'border-green-500 bg-green-50' : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className={`w-3 h-3 rounded-full ${
                      subscriber.isActive ? 'bg-green-500' : 'bg-gray-400'
                    }`}></div>
                    <span className="text-sm font-medium">{subscriber.name}</span>
                  </div>
                  <Button
                    onClick={() => toggleSubscriber(subscriber.id)}
                    size="sm"
                    variant={subscriber.isActive ? "destructive" : "outline"}
                  >
                    {subscriber.isActive ? '–°—Ç–æ–ø' : '–°—Ç–∞—Ä—Ç'}
                  </Button>
                </div>
                <div className="mt-1 text-xs text-gray-500">
                  ID: {subscriber.id}
                </div>
              </div>
            ))}
          </div>
        </div>

        <Separator />

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏</Label>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-blue-50 p-3 rounded">
              <div className="flex items-center gap-2">
                <Users className="h-4 w-4 text-blue-500" />
                <span className="text-sm font-medium">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏</span>
              </div>
              <div className="text-2xl font-bold text-blue-600">{activeSubscriberCount}</div>
              <div className="text-xs text-gray-600">–∏–∑ {subscribers.length} –≤—Å–µ–≥–æ</div>
            </div>

            <div className="bg-green-50 p-3 rounded">
              <div className="flex items-center gap-2">
                <Wifi className="h-4 w-4 text-green-500" />
                <span className="text-sm font-medium">–†–µ–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</span>
              </div>
              <div className="text-2xl font-bold text-green-600">
                {currentSubscription ? 1 : 0}
              </div>
              <div className="text-xs text-gray-600">
                {currentSubscription ? '–û–±—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ' : '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}
              </div>
            </div>
          </div>

          {currentSubscription && (
            <div className="bg-gray-50 p-3 rounded">
              <div className="flex items-center gap-2 mb-2">
                <Database className="h-4 w-4" />
                <span className="text-sm font-medium">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏</span>
              </div>
              <div className="text-xs space-y-1">
                <div>üîë –ö–ª—é—á: <span className="font-mono">{exchange}:{symbol}:trades</span></div>
                <div>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: <span className="font-mono">{currentSubscription.subscriberCount}</span></div>
                <div>üì° –ú–µ—Ç–æ–¥: <span className="font-mono">{currentSubscription.method}</span></div>
                <div>üü¢ –°—Ç–∞—Ç—É—Å: <span className="font-mono">{currentSubscription.isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}</span></div>
                <div>‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span className="font-mono">
                  {currentSubscription.lastUpdate ? new Date(currentSubscription.lastUpdate).toLocaleTimeString() : '–ù–∏–∫–æ–≥–¥–∞'}
                </span></div>
              </div>
            </div>
          )}

          <div className="text-xs text-gray-500 bg-yellow-50 p-3 rounded">
            <strong>üí° –ü—Ä–∏–Ω—Ü–∏–ø –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:</strong><br />
            –ù–µ–≤–∞–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ API.
            –≠—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã API.
          </div>
        </div>

        <Separator />

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ({currentTrades.length} —Å–¥–µ–ª–æ–∫)</Label>
          
          {currentTrades.length > 0 ? (
            <div className="max-h-32 overflow-y-auto space-y-1">
              {currentTrades.slice(0, 5).map((trade, index) => (
                <div key={index} className="flex justify-between text-xs bg-gray-50 p-2 rounded">
                  <span className={`font-mono ${trade.side === 'buy' ? 'text-green-600' : 'text-red-600'}`}>
                    {trade.side.toUpperCase()}
                  </span>
                  <span className="font-mono">{trade.price}</span>
                  <span className="font-mono">{trade.amount}</span>
                  <span className="text-gray-500">
                    {new Date(trade.timestamp).toLocaleTimeString()}
                  </span>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center text-gray-400 py-4">
              {anyActive ? '–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...' : '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export const DataProviderDemoWidget: React.FC = () => {
  return (
    <ErrorBoundary>
      <DataProviderDemoWidgetInner />
    </ErrorBoundary>
  );
}; 