import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { ErrorBoundary } from '../ui/ErrorBoundary';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Switch } from '../ui/switch';
import { Separator } from '../ui/separator';
import { useDataProviderStore } from '../../store/dataProviderStore';
import { DataFetchMethod, DataType } from '../../types/dataProviders';
import { Settings, Wifi, WifiOff, Clock, Activity, BarChart, Database } from 'lucide-react';

const DataProviderSettingsWidgetInner: React.FC = () => {
  const { 
    dataFetchSettings, 
    setDataFetchMethod, 
    setRestInterval,
    getActiveSubscriptionsList
  } = useDataProviderStore();

  const [tradesInterval, setTradesInterval] = useState(dataFetchSettings.restIntervals.trades.toString());
  const [candlesInterval, setCandlesInterval] = useState(dataFetchSettings.restIntervals.candles.toString());
  const [orderbookInterval, setOrderbookInterval] = useState(dataFetchSettings.restIntervals.orderbook.toString());

  const activeSubscriptions = getActiveSubscriptionsList();

  const handleMethodChange = async (method: DataFetchMethod) => {
    console.log(`üîÑ Changing data fetch method to: ${method}...`);
    await setDataFetchMethod(method);
    console.log(`‚úÖ Data fetch method successfully changed to: ${method}`);
  };

  const handleIntervalChange = (dataType: DataType, value: string) => {
    const interval = parseInt(value);
    if (!isNaN(interval) && interval > 0) {
      setRestInterval(dataType, interval);
      console.log(`‚è±Ô∏è ${dataType} interval set to ${interval}ms`);
    }
  };

  const handleTradesIntervalSubmit = () => {
    handleIntervalChange('trades', tradesInterval);
  };

  const handleCandlesIntervalSubmit = () => {
    handleIntervalChange('candles', candlesInterval);
  };

  const handleOrderbookIntervalSubmit = () => {
    handleIntervalChange('orderbook', orderbookInterval);
  };

  const formatInterval = (ms: number): string => {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${ms / 1000}s`;
    return `${ms / 60000}m`;
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5" />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</Label>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="websocket-mode"
                checked={dataFetchSettings.method === 'websocket'}
                onCheckedChange={(checked) => handleMethodChange(checked ? 'websocket' : 'rest')}
              />
              <Label htmlFor="websocket-mode" className="flex items-center gap-2">
                {dataFetchSettings.method === 'websocket' ? (
                  <>
                    <Wifi className="h-4 w-4 text-green-500" />
                    WebSocket (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
                  </>
                ) : (
                  <>
                    <WifiOff className="h-4 w-4 text-orange-500" />
                    REST (–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
                  </>
                )}
              </Label>
            </div>
          </div>
          <div className="text-xs text-gray-500">
            {dataFetchSettings.method === 'websocket' 
              ? '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ REST –µ—Å–ª–∏ WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'
              : '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –±–∏—Ä–∂ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebSocket.'
            }
          </div>
        </div>

        <Separator />

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ REST (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ REST) */}
        {dataFetchSettings.method === 'rest' && (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4" />
              <Label className="text-sm font-medium">–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã REST –∑–∞–ø—Ä–æ—Å–æ–≤</Label>
            </div>

            {/* Trades interval */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <Activity className="h-4 w-4 text-blue-500" />
                <Label className="text-sm">–°–¥–µ–ª–∫–∏ (Trades)</Label>
                <span className="text-xs text-gray-500">
                  –¢–µ–∫—É—â–∏–π: {formatInterval(dataFetchSettings.restIntervals.trades)}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Input
                  type="number"
                  placeholder="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
                  value={tradesInterval}
                  onChange={(e) => setTradesInterval(e.target.value)}
                  className="flex-1"
                  min="100"
                  step="100"
                />
                <Button onClick={handleTradesIntervalSubmit} size="sm">
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
              </div>
            </div>

            {/* Candles interval */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <BarChart className="h-4 w-4 text-green-500" />
                <Label className="text-sm">–°–≤–µ—á–∏ (Candles)</Label>
                <span className="text-xs text-gray-500">
                  –¢–µ–∫—É—â–∏–π: {formatInterval(dataFetchSettings.restIntervals.candles)}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Input
                  type="number"
                  placeholder="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
                  value={candlesInterval}
                  onChange={(e) => setCandlesInterval(e.target.value)}
                  className="flex-1"
                  min="100"
                  step="100"
                />
                <Button onClick={handleCandlesIntervalSubmit} size="sm">
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
              </div>
            </div>

            {/* OrderBook interval */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <Database className="h-4 w-4 text-purple-500" />
                <Label className="text-sm">–ö–Ω–∏–≥–∞ –∑–∞–∫–∞–∑–æ–≤ (OrderBook)</Label>
                <span className="text-xs text-gray-500">
                  –¢–µ–∫—É—â–∏–π: {formatInterval(dataFetchSettings.restIntervals.orderbook)}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Input
                  type="number"
                  placeholder="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
                  value={orderbookInterval}
                  onChange={(e) => setOrderbookInterval(e.target.value)}
                  className="flex-1"
                  min="100"
                  step="100"
                />
                <Button onClick={handleOrderbookIntervalSubmit} size="sm">
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
              </div>
            </div>

            <div className="text-xs text-gray-500 bg-yellow-50 p-2 rounded">
              üí° <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> Trades 500-1000ms, Candles 5000ms, OrderBook 200-500ms. 
              –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –ª–∏–º–∏—Ç–æ–≤ API.
            </div>
          </div>
        )}

        <Separator />

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</Label>
          <div className="text-sm text-gray-600">
            –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <span className="font-mono">{activeSubscriptions.length}</span>
          </div>
          
          {activeSubscriptions.length > 0 && (
            <div className="space-y-2 max-h-32 overflow-y-auto">
              {activeSubscriptions.map((subscription, index) => (
                <div key={index} className="flex items-center justify-between text-xs bg-gray-50 p-2 rounded">
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${subscription.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                    <span className="font-mono">
                      {subscription.key.exchange}:{subscription.key.symbol}:{subscription.key.dataType}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-gray-500">
                      {subscription.method === 'websocket' ? 'üì°' : 'üîÑ'} {subscription.method}
                    </span>
                    <span className="font-mono text-blue-600">
                      {subscription.subscriberCount} –ø–æ–¥–ø–∏—Å—á–∏–∫{subscription.subscriberCount !== 1 ? '–æ–≤' : ''}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}

          {activeSubscriptions.length === 0 && (
            <div className="text-sm text-gray-400 italic">
              –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–∂–µ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.
            </div>
          )}
        </div>

        <div className="text-xs text-gray-400 pt-2 border-t">
          üí° –ü–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—Ç—Å—è - –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–∂–µ—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        </div>
      </CardContent>
    </Card>
  );
};

export const DataProviderSettingsWidget: React.FC = () => {
  return (
    <ErrorBoundary>
      <DataProviderSettingsWidgetInner />
    </ErrorBoundary>
  );
}; 